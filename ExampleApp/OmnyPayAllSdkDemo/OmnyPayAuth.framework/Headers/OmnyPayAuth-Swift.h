// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum AuthenticationLevel : NSInteger;

/**
  An instance that represents the configuration of user authentication. \code
  OmnyPayAuth
  \endcode instance can be configured with custom authentication level, whether to authenticate user using only biometric authentication or by using passcode if biometric authentication is not present. By default, user will be authenticated using biometric authentication only.
*/
SWIFT_CLASS("_TtC11OmnyPayAuth10AuthConfig")
@interface AuthConfig : NSObject
/**
  A read-only property to get text to be displayed in authentication dialog.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable reason;
/**
  A read-only property to get authentication type used for authenticating user.
*/
@property (nonatomic, readonly) enum AuthenticationLevel authenticationLevel;
/**
  A convenience initializer that initializes \code
  OmnyPayAuthConfiguration
  \endcode from another omnyPayAuthConfiguration object
  \param config A \code
  OmnyPayAuthConfiguration
  \endcode object


  returns:
  An instance of \code
  OmnyPayAuthConfiguration
  \endcode
*/
- (nonnull instancetype)initWithConfiguration:(AuthConfig * _Nonnull)config;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  An object of \code
  AuthResult
  \endcode represents the results of user authentication. This object contains a boolean value for authentication status and an error if user authentication fails.
*/
SWIFT_CLASS("_TtC11OmnyPayAuth10AuthResult")
@interface AuthResult : NSObject
/**
  A boolean value to check the status of user authentication operation
*/
@property (nonatomic) BOOL success;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/**
  \code
  AuthenticationError
  \endcode represents error, if any, which occurred during authentication
*/
typedef SWIFT_ENUM(NSInteger, AuthenticationError) {
/**
  Authentication was not successful, because user failed to provide valid credentials.
*/
  AuthenticationErrorAuthenticationFailed = 0,
/**
  Authentication was canceled by user (e.g. tapped Cancel button).
*/
  AuthenticationErrorUserCancel = 1,
/**
  Authentication was canceled, because the user tapped the fallback button (Enter Password).
*/
  AuthenticationErrorUserFallback = 2,
/**
  Authentication was canceled by system (e.g. another application went to foreground).
*/
  AuthenticationErrorSystemCancel = 3,
/**
  Authentication could not start, because passcode is not set on the device.
*/
  AuthenticationErrorPasscodeNotSet = 4,
/**
  Authentication could not start, because Touch ID is not available on the device.
*/
  AuthenticationErrorTouchIDNotAvailable = 5,
/**
  Authentication could not start, because Touch ID has no enrolled fingers.
*/
  AuthenticationErrorTouchIDNotEnrolled = 6,
/**
  Authentication was not successful, because there were too many failed Touch ID attempts and
  Touch ID is now locked. Passcode is required to unlock Touch ID, e.g. evaluating
  LAPolicyDeviceOwnerAuthenticationWithBiometrics will ask for passcode as a prerequisite.
*/
  AuthenticationErrorTouchIDLockout = 7,
/**
  Authentication was canceled by application (e.g. invalidate was called while
  authentication was in progress).
*/
  AuthenticationErrorAppCancel = 8,
/**
  LAContext passed to this call has been previously invalidated.
*/
  AuthenticationErrorInvalidContext = 9,
/**
  An unexpected error occurred while authenticating user.
*/
  AuthenticationErrorUnexpectedError = 10,
};

/**
  A type that represents the authentication level of \code
  OmnyPayAuth
  \endcode
  <ul>
    <li>
      BiometricOnly: Biometric authentication only. Use this authentication level when user needs to be authenticated using fingerprint only.
    </li>
    <li>
      BiometricOrPasscode: Use this authentication level when user needs to be with passcode if biometric authentication is not available. If biometric authentication is present, it will use biometric authentication to authenticate user.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, AuthenticationLevel) {
/**
  Biometric authentication only.
*/
  AuthenticationLevelBiometricOnly = 0,
/**
  Passcode authentication if Biometric authentication is not available, else biometric authentication.
*/
  AuthenticationLevelBiometricOrPasscode = 1,
};


/**
  A final class that can be used to authenticate user using biometric authentication
  This class provides a singleton instance that is initialized with a default configuration of \code
  AuthConfig
  \endcode type. For most of the purposes this singleton instance should be enough.
  For any custom usage a new instance of this class can be created by providing a custom configuration.
*/
SWIFT_CLASS("_TtC11OmnyPayAuth11OmnyPayAuth")
@interface OmnyPayAuth : NSObject
/**
  A shared instance of \code
  OmnyPayAuth
  \endcode, initialized with default \code
  AuthConfig
  \endcode
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) OmnyPayAuth * _Nonnull shared;)
+ (OmnyPayAuth * _Nonnull)shared;
/**
  Configuration of \code
  OmnyPayAuth
  \endcode instance. It is a read-only property
*/
@property (nonatomic, readonly, strong) AuthConfig * _Nonnull configuration;
/**
  Creates an instance of \code
  OmnyPayAuth
  \endcode
  \param configuration An object of \code
  AuthConfig
  \endcode type. If nothing is passed in this parameter default configuration is used.


  returns:
  An instance of \code
  OmnyPayAuth
  \endcode
*/
- (nonnull instancetype)initWithConfig:(AuthConfig * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
/**
  Function to start authentication as per configuration.
  \param handler The block to execute after the authentication finishes. It takes one parameter and has no return value.
  This completion handler takes the following parameter:
  \code
  AuthResult
  \endcode - an object of \code
  AuthResult
  \endcode type which contains the status of authentication and the error if there is any.

*/
- (void)start:(void (^ _Nullable)(AuthResult * _Nonnull))handler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
